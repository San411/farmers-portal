import sqlite3
import timsort
import datetime

def notify_bij():

    #Getting all the preferred purchase dates
    purchase = []
    conn = sqlite3.connect('purchase.db')
    c = conn.cursor()
    c.execute("SELECT purchase_day FROM purchase_bij")
    for i in c.fetchall():
        purchase.append(i[0])
    conn.commit()
    conn.close()

    #Sorting and removing the duplicates
    timsort.timSort(purchase, len(purchase))
    purchase = list(dict.fromkeys(purchase))

    #list created for fetching the data from database
    not_list = []
    for i in purchase:
        conn = sqlite3.connect('purchase.db')
        c = conn.cursor()
        c.execute("SELECT * FROM purchase_bij WHERE purchase_day= ?", (i,))
        for j in c.fetchall():
            not_list.append(j)
        conn.commit()
        conn.close()
    print(not_list)
    for x in not_list:
        #If the delivery is today
        if(x[8]==str(datetime.date.today())):
            emailid=x[1]
            buyername=x[0]
            crop=x[4]
            price=x[6]
            conn = sqlite3.connect('crop.db')
            c = conn.cursor()
            c.execute("SELECT number FROM bijapur WHERE id=?", (x[5],))
            for x in c.fetchall():
                RECIEVER_NUM=x[0]

            conn.commit()
            conn.close()
            mailmessage="Congratulations Mr.",buyername,". Your order has been placed successfully. Following are the purchase details " \
            "Total Amount :",price,"(including delivery charges) " \
            "Crop :",crop,"Your order will be deliverd by today." \
                          "Thank You."
            print(mailmessage)

            MESSAGE="Congratulations. Your crop",crop,"has been purchased by Mr.",buyer_name,"for a total price of â‚¹",price,"(delivery charges applied). Our deliverymen will be arriving at your doorstep today to collect the order.Thank You "

            print(MESSAGE)
            #To remove the purchase entry from the database so that multiple messages aren't sent
            conn = sqlite3.connect('purchase.db')
            c = conn.cursor()
            c.execute("DELETE FROM purchase_bij WHERE farmer_id =?", (x[5],))
            conn.commit()
            conn.close()

        #If the delivery is tommorow
        elif(x[8]==str(datetime.date.today()+datetime.timedelta(days=1))):

            # send the message here to the farmer with all the details in the database. After this delete the particular entry from the database
            print('Message to farmer sent')

            # To remove the purchase entry from the database so that multiple messages aren't sent
            conn = sqlite3.connect('purchase.db')
            c = conn.cursor()
            c.execute("DELETE FROM purchase_bij WHERE farmer_id =?", (x[5],))
            conn.commit()
            conn.close()

def notify_ban():

    #Getting all the preferred purchase dates
    purchase = []
    conn = sqlite3.connect('purchase.db')
    c = conn.cursor()
    c.execute("SELECT purchase_day FROM purchase_ban")
    for i in c.fetchall():
        purchase.append(i[0])
    conn.commit()
    conn.close()

    #Sorting and removing the duplicates
    timsort.timSort(purchase, len(purchase))
    purchase = list(dict.fromkeys(purchase))

    #list created to for storing the data from database
    not_list = []
    for i in purchase:
        conn = sqlite3.connect('purchase.db')
        c = conn.cursor()
        c.execute("SELECT * FROM purchase_ban WHERE purchase_day= ?", (i,))
        for j in c.fetchall():
            not_list.append(j)
        conn.commit()
        conn.close()

    for x in not_list:
        #If the delivery is today
        if(x[8]==str(datetime.date.today())):

            #send the message here to the farmer with all the details in the database. After this delete the particular entry from the database
            print('Message to farmer sent')

            #To remove the purchase entry from the database so that multiple messages aren't sent
            conn = sqlite3.connect('purchase.db')
            c = conn.cursor()
            c.execute("DELETE FROM purchase_ban WHERE farmer_id =?", (x[5],))
            conn.commit()
            conn.close()

        #If the delivery is tommorow
        elif(x[8]==str(datetime.date.today()+datetime.timedelta(days=1))):

            # send the message here to the farmer with all the details in the database. After this delete the particular entry from the database
            print('Message to farmer sent')

            # To remove the purchase entry from the database so that multiple messages aren't sent
            conn = sqlite3.connect('purchase.db')
            c = conn.cursor()
            c.execute("DELETE FROM purchase_ban WHERE farmer_id =?", (x[5],))
            conn.commit()
            conn.close()

def notify_udupi():

    #Getting all the preferred purchase dates
    purchase = []
    conn = sqlite3.connect('purchase.db')
    c = conn.cursor()
    c.execute("SELECT purchase_day FROM purchase_ud")
    for i in c.fetchall():
        purchase.append(i[0])
    conn.commit()
    conn.close()

    #Sorting and removing the duplicates
    timsort.timSort(purchase, len(purchase))
    purchase = list(dict.fromkeys(purchase))

    #list created to for storing the data from database
    not_list = []
    for i in purchase:
        conn = sqlite3.connect('purchase.db')
        c = conn.cursor()
        c.execute("SELECT * FROM purchase_ud WHERE purchase_day= ?", (i,))
        for j in c.fetchall():
            not_list.append(j)
        conn.commit()
        conn.close()

    for x in not_list:
        #If the delivery is today
        if(x[8]==str(datetime.date.today())):

            #send the message here to the farmer with all the details in the database. After this delete the particular entry from the database
            print('Message to farmer sent')

            #To remove the purchase entry from the database so that multiple messages aren't sent
            conn = sqlite3.connect('purchase.db')
            c = conn.cursor()
            c.execute("DELETE FROM purchase_ud WHERE farmer_id =?", (x[5],))
            conn.commit()
            conn.close()

        #If the delivery is tommorow
        elif(x[8]==str(datetime.date.today()+datetime.timedelta(days=1))):

            # send the message here to the farmer with all the details in the database. After this delete the particular entry from the database
            print('Message to farmer sent')

            # To remove the purchase entry from the database so that multiple messages aren't sent
            conn = sqlite3.connect('purchase.db')
            c = conn.cursor()
            c.execute("DELETE FROM purchase_ud WHERE farmer_id =?", (x[5],))
            conn.commit()
            conn.close()


notify_bij()
